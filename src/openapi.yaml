openapi: "3.0.0"
info:
  title: Satsang
  description: This is the definition for the Satsang Data
  version: "1.0.0"
  # license:
  #   url: https://opensource.org/licenses/MIT
  #   name: MIT
  # contact:
  #   name: Alejandro Duran
  #   email: aledurax@gmail.com
  #   url: https://duranzno.netlify.com

tags:
  - name: event
    description: Everything about the events existing in the app
  - name: categories
    description: Access to Event Categories
  - name: user
    description: Operations about user

servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Duranzno/satsang/1.0.0
  - url: https://satsang-app.herokuapp.com/api
    description: Real Backend
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 12123
        name:
          example: "Tantric"
          type: string
      xml:
        name: Category
    UserLoginInput:
      type: object
      properties:
        email:
          type: string
          example: "Smith"
        password:
          example: "not_safe_password"
          type: string
    UserSignupInput:
      allOf:
        - $ref: "#/components/schemas/UserLoginInput"
        - type: object
          properties:
            name:
              example: "john"
              type: string
    User:
      allOf:
        - $ref: "#/components/schemas/UserSignupInput"
        - type: object
          properties:
            id:
              type: integer
              format: int64
              example: 345678816523
          xml:
            name: User
    EventInput:
      type: object
      required:
        - title
        - datetime
        - duration
      properties:
        online:
          type: boolean
          example: true
        title:
          type: string
          example: "Relaxing Yoga"
          maxLength: 40
        description:
          type: string
          example: "Description"
        datetime:
          example: "2020-05-05T16:28:33.983+09:00"
          type: string
        duration:
          example: 15
          type: integer
          maximum: 100
    Event:
      allOf:
        - $ref: "#/components/schemas/EventInput"
        - type: object
          required:
            - name
            - photoUrls
          properties:
            id:
              type: integer
              format: int64
            userId:
              type: integer
              format: int64
            user:
              type: array
              items:
                $ref: "#/components/schemas/User"
            categoryId:
              type: integer
              format: int64
            category:
              type: array
              items:
                $ref: "#/components/schemas/Category"
            locationId:
              type: integer
              format: int64
            location:
              $ref: "#/components/schemas/Location"
            photoUrls:
              type: array
              xml:
                name: photoUrl
                wrapped: true
              items:
                type: string
            categories:
              type: array
              xml:
                name: categories
                wrapped: true
              items:
                $ref: "#/components/schemas/Category"
    Location:
      type: object
      properties:
        code:
          type: integer
          format: int64
        type:
          type: string
        message:
          type: string
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    Event:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EventInput"
        application/xml:
          schema:
            $ref: "#/components/schemas/EventInput"
      description: Event object that needs to be added to the store
      required: true
    UserLoginInput:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserLoginInput"
      required: true
    UserSignupInput:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserSignupInput"
      required: true
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: Token

paths:
  /api/event:
    get:
      tags:
        - event
      description: Get All Events
      summary: Get All Events
      operationId: getAllEvents
      responses:
        200:
          description: Event Data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
    post:
      tags:
        - event
      summary: Add a new event to the store
      operationId: addEvent
      responses:
        "200":
          description: "Created Event"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "405":
          description: Invalid input
      requestBody:
        $ref: "#/components/requestBodies/Event"
  /api/event/{id}:
    get:
      tags:
        - event
      description: Get Event by ID
      summary: Get Event by ID
      operationId: getEventById
      parameters:
        - in: path
          name: id
          required: true
          description: This will get the event info by its id
          schema:
            type: string
      responses:
        200:
          description: Event Data
          content:
            application/json:
              schema:
                type: string
    put:
      parameters:
        - in: path
          name: id
          required: true
          description: This will get the event info by its id
          schema:
            type: string
      tags:
        - event
      summary: Update an existing event
      description: Update an existing event
      operationId: updateEvent
      responses:
        "200":
          description: Updated Event
        "400":
          description: Invalid ID supplied
        "404":
          description: Event not found
        "405":
          description: Validation exception
      requestBody:
        $ref: "#/components/requestBodies/Event"
    delete:
      parameters:
        - in: path
          name: id
          required: true
          description: This will delete the event info by its id
          schema:
            type: string
      tags:
        - event
      summary: Delete an existing event
      description: Delete an existing event
      operationId: deleteEvent
      responses:
        "200":
          description: Delete Event
        "400":
          description: Invalid ID supplied
        "404":
          description: Event not found
        "405":
          description: Validation exception
  /api/auth/signup:
    post:
      tags:
        - auth
      summary: Create new user with mail/password
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSignupInput"
      responses:
        "200":
          description: "Signup Successfull"
        "405":
          description: Invalid input
  /api/auth/login:
    post:
      tags:
        - auth
      summary: Post endpoint for login user
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginInput"

      responses:
        "200":
          description: "Login Successful"
        "405":
          description: Invalid input
  /api/auth/current:
    get:
      tags:
        - auth
      security:
        - bearerAuth: []
      summary: Get Current User Using Auth Data
      operationId: logout
      responses:
        "200":
          description: "Sucess"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "405":
          description: Invalid input
  /api/user/{id}:
    get:
      description: Get User data with their Events
      summary: Get User data with their Events
      operationId: getUser
      parameters:
        - in: path
          name: id
          description: UserId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    put:
      description: Update User Data
      summary: Update User Data
      operationId: updateUser
      parameters:
        - in: path
          name: id
          description: UserId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    delete:
      description: Delete User
      summary: Delete User
      operationId: deleteUser
      parameters:
        - in: path
          name: id
          description: UserId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /api/user/{id}/attendance/{eventId}:
    put:
      description: Attend event
      summary: Attend event
      operationId: attendEvent
      parameters:
        - in: path
          name: id
          description: UserId
          required: true
          schema:
            type: string
        - in: path
          name: eventId
          description: eventId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    delete:
      description: Unattend Event
      summary: Unattend Event
      operationId: unattendEvent
      parameters:
        - in: path
          name: id
          description: UserId
          required: true
          schema:
            type: string
        - in: path
          name: eventId
          description: eventId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
security:
  - bearerAuth: []
externalDocs:
  description: Find out more about satsang
  url: https://satsang-app.herokuapp.com/
