openapi: "3.0.0"
info:
  description: This is the definition for the Satsang Data
  version: "1.0.0"
  license:
    url: https://opensource.org/licenses/MIT
    name: MIT
  title: Satsang
  contact:
    name: Alejandro Duran
    email: aledurax@gmail.com
    url: https://duranzno.netlify.com

tags:
  - name: event
    description: Everything about the events existing in the app
  - name: categories
    description: Access to Event Categories
  - name: user
    description: Operations about user

servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Duranzno/satsang/1.0.0
  - url: https://satsang-app.herokuapp.com/api
    description: Real Backend

paths:
  /api/event:
    get:
      tags:
        - event
      description: Get All Events
      summary: Get All Events
      operationId: getAllEvents
      responses:
        200:
          description: Event Data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
    post:
      tags:
        - event
      summary: Add a new event to the store
      operationId: addEvent
      responses:
        "200":
          description: "Created Event"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "405":
          description: Invalid input
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
      requestBody:
        $ref: "#/components/requestBodies/Event"
  /api/event/{id}:
    get:
      tags:
        - event
      description: Get Event by ID
      summary: Get Event by ID
      operationId: getEventById
      parameters:
        - in: path
          name: id
          required: true
          description: This will get the event info by its id
          schema:
            type: string
      responses:
        200:
          description: Event Data
          content:
            application/json:
              schema:
                type: string
    put:
      parameters:
        - in: path
          name: id
          required: true
          description: This will get the event info by its id
          schema:
            type: string
      tags:
        - event
      summary: Update an existing event
      description: Update an existing event
      operationId: updateEvent
      responses:
        "200":
          description: Updated Event
        "400":
          description: Invalid ID supplied
        "404":
          description: Event not found
        "405":
          description: Validation exception
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
      requestBody:
        $ref: "#/components/requestBodies/Event"
    delete:
      parameters:
        - in: path
          name: id
          required: true
          description: This will delete the event info by its id
          schema:
            type: string
      tags:
        - event
      summary: Delete an existing event
      description: Delete an existing event
      operationId: deleteEvent
      responses:
        "200":
          description: Delete Event
        "400":
          description: Invalid ID supplied
        "404":
          description: Event not found
        "405":
          description: Validation exception
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"

  # /api/event/findByStatus:
  #   get:
  #     tags:
  #       - event
  #     summary: Finds Events by status
  #     description: Multiple status values can be provided with comma separated strings
  #     operationId: findEventsByStatus
  #     parameters:
  #       - name: status
  #         in: query
  #         description: Status values that need to be considered for filter
  #         required: true
  #         explode: true
  #         schema:
  #           type: array
  #           items:
  #             type: string
  #             enum:
  #               - available
  #               - pending
  #               - sold
  #             default: available
  #     responses:
  #       "200":
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: "#/components/schemas/Event"
  #           application/xml:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: "#/components/schemas/Event"
  #       "400":
  #         description: Invalid status value
  #     security:
  #       - petstore_auth:
  #           - "write:pets"
  #           - "read:pets"
  # /api/event/findByTags:
  #   get:
  #     tags:
  #       - event
  #     summary: Finds Events by tags
  #     description: >-
  #       Muliple tags can be provided with comma separated strings. Use\ \ tag1,
  #       tag2, tag3 for testing.
  #     operationId: findEventsByTags
  #     parameters:
  #       - name: tags
  #         in: query
  #         description: Tags to filter by
  #         required: true
  #         explode: true
  #         schema:
  #           type: array
  #           items:
  #             type: string
  #     responses:
  #       "200":
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: "#/components/schemas/Event"
  #           application/xml:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: "#/components/schemas/Event"
  #       "400":
  #         description: Invalid tag value
  #     security:
  #       - petstore_auth:
  #           - "write:pets"
  #           - "read:pets"
  #     deprecated: true
  # "/api/event/{petId}":
  #   get:
  #     tags:
  #       - event
  #     summary: Find event by ID
  #     description: Returns a single event
  #     operationId: getEventById
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of event to return
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       "200":
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Event"
  #           application/xml:
  #             schema:
  #               $ref: "#/components/schemas/Event"
  #       "400":
  #         description: Invalid ID supplied
  #       "404":
  #         description: Event not found
  #     security:
  #       - api_key: []
  #   post:
  #     tags:
  #       - event
  #     summary: Updates a event in the store with form data
  #     operationId: updateEventWithForm
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of event that needs to be updated
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       "405":
  #         description: Invalid input
  #     security:
  #       - petstore_auth:
  #           - "write:pets"
  #           - "read:pets"
  #     requestBody:
  #       content:
  #         application/x-www-form-urlencoded:
  #           schema:
  #             type: object
  #             properties:
  #               name:
  #                 description: Updated name of the event
  #                 type: string
  #               status:
  #                 description: Updated status of the event
  #                 type: string
  #   delete:
  #     tags:
  #       - event
  #     summary: Deletes a event
  #     operationId: deleteEvent
  #     parameters:
  #       - name: api_key
  #         in: header
  #         required: false
  #         schema:
  #           type: string
  #       - name: petId
  #         in: path
  #         description: Event id to delete
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       "400":
  #         description: Invalid ID supplied
  #       "404":
  #         description: Event not found
  #     security:
  #       - petstore_auth:
  #           - "write:pets"
  #           - "read:pets"
  # "/api/event/{petId}/uploadImage":
  #   post:
  #     tags:
  #       - event
  #     summary: uploads an image
  #     operationId: uploadFile
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of event to update
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       "200":
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ApiResponse"
  #     security:
  #       - petstore_auth:
  #           - "write:pets"
  #           - "read:pets"
  #     requestBody:
  #       content:
  #         application/octet-stream:
  #           schema:
  #             type: string
  #             format: binary
  # /api/user:
  #   post:
  #     tags:
  #       - user
  #     summary: Create user
  #     description: This can only be done by the logged in user.
  #     operationId: createUser
  #     responses:
  #       default:
  #         description: successful operation
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/User"
  #       description: Created user object
  #       required: true
  # /api/user/login:
  #   get:
  #     tags:
  #       - user
  #     summary: Logs user into the system
  #     operationId: loginUser
  #     parameters:
  #       - name: username
  #         in: query
  #         description: The user name for login
  #         required: true
  #         schema:
  #           type: string
  #       - name: password
  #         in: query
  #         description: The password for login in clear text
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       "200":
  #         description: successful operation
  #         headers:
  #           X-Rate-Limit:
  #             description: calls per hour allowed by the user
  #             schema:
  #               type: integer
  #               format: int32
  #           X-Expires-After:
  #             description: date in UTC when token expires
  #             schema:
  #               type: string
  #               format: date-time
  #         content:
  #           application/json:
  #             schema:
  #               type: string
  #           application/xml:
  #             schema:
  #               type: string
  #       "400":
  #         description: Invalid username/password supplied
  # /api/user/logout:
  #   get:
  #     tags:
  #       - user
  #     summary: Logs out current logged in user session
  #     operationId: logoutUser
  #     responses:
  #       default:
  #         description: successful operation
  # "/api/user/{username}":
  #   get:
  #     tags:
  #       - user
  #     summary: Get user by user name
  #     operationId: getUserByName
  #     parameters:
  #       - name: username
  #         in: path
  #         description: The name that needs to be fetched. Use user1 for testing.
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       "200":
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/User"
  #           application/xml:
  #             schema:
  #               $ref: "#/components/schemas/User"
  #       "400":
  #         description: Invalid username supplied
  #       "404":
  #         description: User not found
  #   put:
  #     tags:
  #       - user
  #     summary: Updated user
  #     description: This can only be done by the logged in user.
  #     operationId: updateUser
  #     parameters:
  #       - name: username
  #         in: path
  #         description: name that need to be updated
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       "400":
  #         description: Invalid user supplied
  #       "404":
  #         description: User not found
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/User"
  #       description: Updated user object
  #       required: true
  #   delete:
  #     tags:
  #       - user
  #     summary: Delete user
  #     description: This can only be done by the logged in user.
  #     operationId: deleteUser
  #     parameters:
  #       - name: username
  #         in: path
  #         description: The name that needs to be deleted
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       "400":
  #         description: Invalid username supplied
  #       "404":
  #         description: User not found
externalDocs:
  description: Find out more about satsang
  url: https://satsang-app.herokuapp.com/
components:
  schemas:
    EventInput:
      type: object
      required:
        - title
        - datetime
        - duration
      properties:
        online:
          type: boolean
          example: true
        title:
          type: string
          example: "Relaxing Yoga"
          maxLength: 40
        description:
          type: string
          example: "Description"
        datetime:
          example: "2020-05-05T16:28:33.983+09:00"
          type: string
        duration:
          example: 15
          type: integer
          maximum: 100
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
        password:
          type: string
      xml:
        name: User
    Event:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        user:
          type: array
          items:
            $ref: "#/components/schemas/User"
        categoryId:
          type: integer
          format: int64
        category:
          type: array
          items:
            $ref: "#/components/schemas/Category"
        locationId:
          type: integer
          format: int64
        location:
          $ref: "#/components/schemas/Location"
        name:
          type: string
          example: Relaxing Yoga

        description:
          type: string
          example: "Description"
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        categories:
          type: array
          xml:
            name: categories
            wrapped: true
          items:
            $ref: "#/components/schemas/Category"
      xml:
        name: Event
    Location:
      type: object
      properties:
        code:
          type: integer
          format: int64
        type:
          type: string
        message:
          type: string
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    Event:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EventInput"
        application/xml:
          schema:
            $ref: "#/components/schemas/EventInput"
      description: Event object that needs to be added to the store
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
          scopes:
            "write:pets": modify pets in your account
            "read:pets": read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
